<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 配置 SQL 映射
        namespace:命名空间.
            1.随便写。
            2.Mapper 接口开发，不能随便写，必须按照规定来写。
 -->
<mapper namespace="com.zyj.mybatis.dao.EmployeeMapperDynamicSQL">
    <!-- 使用动态 SQL  -->
    <!-- public List<Employee> getEmployeesByConditionIfWhere(Employee condition); -->
    <select id="getEmployeesByConditionIfWhere" resultType="com.zyj.mybatis.beans.Employee">
        select id, last_name,email,gender
        from employee
        <!-- where 1 = 1 -->
        <where>    <!-- 在 SQL 语句中提供 where 关键字，并且解决第一个出现的 and 或者是 or 的问题 -->
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="last_Name != null &amp;&amp; last_Name != ''">
                and last_name = #{last_Name}
            </if>
            <if test="email != null and email.trim() != &quot;&quot;">
                and email = #{email}
            </if>
            <if test="gender == 0 or gender == 1">
                and gender = #{gender}
            </if>
        </where>
    </select>

    <!-- public List<Employee> getEmployeesByConditionIfTrim(Employee condition); -->
    <select id="getEmployeesByConditionIfTrim" resultType="com.zyj.mybatis.beans.Employee">
        select id, last_name,email,gender
        from employee
        <!--
            prefix: 添加一个前缀
            prefixOverrides: 覆盖 / 去掉一个前缀
            suffix: 添加一个后缀
            suffixOverrides: 覆盖 / 去掉一个后缀
        -->
        <trim prefix="where" suffixOverrides="and|or">
            <if test="id != null">
                id = #{id} and
            </if>
            <if test="last_Name != null &amp;&amp; last_Name != ''">
                 last_name = #{last_Name} and
            </if>
            <if test="email != null and email.trim() != &quot;&quot;">
                 email = #{email} and
            </if>
            <if test="gender == 0 or gender == 1">
                 gender = #{gender}
            </if>
        </trim>
    </select>

    <!-- public void updateEmpByConditionSet(Employee condition); -->
    <update id="updateEmpByConditionSet">
        update employee
        <set>
            <if test="last_Name != null">
                last_name = #{last_Name},
            </if>
            <if test="email != null">
                email = #{email},
            </if>
            <if test="gender == 0 or gender == 1">
                gender = #{gender},
            </if>
        </set>
        where id = #{id}
    </update>
    
    <!-- public List<Employee> getEmployeesByConditionChoose(Employee condition); -->
    <select id="getEmployeesByConditionChoose" resultType="com.zyj.mybatis.beans.Employee">
        select id, last_name, email, gender
        from employee
        where
        <choose>
            <when test="id != null">
                id = #{id}
            </when>
            <when test="last_Name != null">
                last_name = #{last_Name}
            </when>
            <when test="email != null">
                email = #{email}
            </when>
            <otherwise>
                gender = 0
            </otherwise>
        </choose>
    </select>

    <!-- public List<Employee> getEmployeesByIds(@Param("ids") List<Integer> ids); -->
    <select id="getEmployeesByIds" resultType="com.zyj.mybatis.beans.Employee">
        <!--
            select * from employee where id in (?,?,?,...)
            select * from employee where id = ? or id = ? or id = ? ...
        -->
        <!--
            foreach:
                collection: 指定要迭代的集合
                item: 当前从集合中迭代的元素
                open: 指定一个开始字符
                close: 指定一个结束字符
                separator: 元素与元素之间的分隔符
        -->
        select id, last_name, email, gender from employee
        where id in

        <foreach collection="ids" item="currId" open="(" close=")" separator=",">
            #{currId}
        </foreach>

    </select>

    <!--
        public void addEmployees(@Param("employees") List<Employee> employees);
        添加：insert into employee(x,x,x) values(?,?,?),(?,?,?),(?,?,?)
        删除：delete from employee where id in (?,?,?)
        修改：update employee set last_name = #{last_Name} ... where id = #{id};
              update employee set last_name = #{last_Name} ... where id = #{id};
              update employee set last_name = #{last_Name} ... where id = #{id};
        默认情况下，JDBC不允许将多条 SQL 通过分号 ; 拼成一个字符串。
        可以在连接的 url 后面加上一个参数

    -->
    <insert id="addEmployees">
        insert into employee (last_name, email, gender) values 
        <foreach collection="employees" item="emp" separator=",">
            (#{emp.last_Name}, #{emp.email}, #{emp.gender})
        </foreach>
    </insert>
</mapper>